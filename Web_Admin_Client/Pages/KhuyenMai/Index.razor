@page "/KhuyenMai/Index"
@using Blazored.Modal.Services
@using ClosedXML.Excel
@using Model
@using Model.DataDB
@using Model.Dto
@using Models.Page
@using System.Data
@using Syncfusion.XlsIO
@using Web_Admin_Client.Pages.Modal
@inject IJSRuntime JS
@layout MainLayout
@using System.Globalization
@using Web_Admin_Client.Pages.Sanpham
@using Web_Admin_Client.Service
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager;
@inject IToastService toastService

<div class="main-panel">
    <div class="content-wrapper">
        <div class="page-header">
            <h3 class="page-title"> Quản lý khuyến mãi</h3>
            @*<SearchForm OnSearchChanged="SearchChanged" />*@
            <button class="btn btn-block btn-lg btn-gradient-primary mdi mdi-playlist-plus" id="profileDropdown" href="#" data-bs-toggle="dropdown" aria-expanded="false"> Thêm thông tin khuyến mãi !</button>
            <div class="dropdown-menu navbar-dropdown" aria-labelledby="profileDropdown">
                <a class="dropdown-item" @onclick="() => Create(ModalSize.Custom,ModalPosition.Custom)">
                    <i class="mdi mdi-tooltip-edit me-2 text-success"></i> Nhập bằng Form
                </a>
                <div class="dropdown-divider"></div>
                <a class="dropdown-item" @onclick="() => ImportExcel(ModalSize.Custom,ModalPosition.Custom)">
                    <i class="mdi mdi-playlist-remove me-2 text-danger"></i> Nhập bằng File Excel
                </a>
                <div class="dropdown-divider"></div>
                <a class="dropdown-item" @onclick="() => CreateDocument()">
                    <i class="mdi mdi-playlist-remove me-2 text-danger"></i> Xuất dữ liệu
                </a>
            </div>
        </div>
        <div class="row">

            <div class="col-lg-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title"></h4>
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Chỉnh sửa</th>
                                    <th>#</th>
                                    <th>Tên sản phẩm</th>
                                    <th>Phần trăm khuyến mãi</th>
                                    <th>Thời gian khuyến mãi</th>

                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in khuyenmaiList)
                                {
                                    <tr>
                                        <td>
                                            <a class="nav-link dropdown-toggle" id="profileDropdown" href="#" data-bs-toggle="dropdown" aria-expanded="false">
                                            </a>
                                            <div class="dropdown-menu navbar-dropdown" aria-labelledby="profileDropdown">
                                                <a class="dropdown-item" @onclick="() => Edit(item.Id,ModalSize.Custom,ModalPosition.Custom)">
                                                    <i class="mdi mdi-tooltip-edit me-2 text-success"></i> Chỉnh sửa
                                                </a>
                                                <div class="dropdown-divider"></div>
                                                <a class="dropdown-item" @onclick="() => Delete(item.Id,ModalSize.Custom,ModalPosition.Custom)">
                                                    <i class="mdi mdi-playlist-remove me-2 text-danger"></i> Xóa
                                                </a>
                                            </div>
                                        </td>
                                        <td>@item.Id</td>
                                        <td> @item.TenSp </td>
                                        <td> @item.Tile </td>
                                        <td> @item.Thoigian </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></Pagination>
                </div>
            </div>

        </div>
    </div>
</div>

@code {
    MemoryStream excelStream;

    List<KhuyenMaiDtoList> khuyenmaiList = new List<KhuyenMaiDtoList>();
    List<KhuyenMaiDtoList> khuyenmaiByExcel = new List<KhuyenMaiDtoList>();
    KhuyenMaiService khuyenMaiService = new KhuyenMaiService();
    public MetaData MetaData { get; set; } = new MetaData();
    private PagingParameters paging = new PagingParameters();
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            khuyenmaiByExcel = await khuyenMaiService.GetListKhuyenMai();
            await GetListKhuyenMai();
        }
        catch(Exception ex)
        {

        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await GetListKhuyenMai();
    }
    private async Task SelectedPage(int page)
    {
        paging.PageNumber = page;
        await GetListKhuyenMai();
    }
    private async Task GetListKhuyenMai()
    {
        var pagingResponse = await khuyenMaiService.GetListPageKhuyenMai(paging);
        khuyenmaiList = pagingResponse.Items;
        MetaData = pagingResponse.MetaData;
    }
    public async void Create(ModalSize size, ModalPosition position)
    {
        var options = new ModalOptions { Size = size, Position = position, DisableBackgroundCancel = true, HideCloseButton = true };
        if (size == ModalSize.Custom)
            options.SizeCustomClass = "my-custom-size";
        if (position == ModalPosition.Custom)
            options.PositionCustomClass = "my-custom-position";
        Modal.Show<Create>("Thêm thông tin khuyến mãi", options);
    }
    public async void Edit(int id, ModalSize size, ModalPosition position)
    {
        await sessionStorage.SetItemAsync("khuyenmai_id", id);
        var options = new ModalOptions { Size = size, Position = position, DisableBackgroundCancel = true, HideCloseButton = true };
        if (size == ModalSize.Custom)
            options.SizeCustomClass = "my-custom-size";
        if (position == ModalPosition.Custom)
            options.PositionCustomClass = "my-custom-position";
        Modal.Show<Edit>("Chỉnh sửa thông tin", options);

    }
    public async Task Delete(int id, ModalSize size, ModalPosition position)
    {
        await sessionStorage.SetItemAsync("khuyenmai_idDelete", id);
        var options = new ModalOptions { Size = size, Position = position, DisableBackgroundCancel = true, HideCloseButton = true };
        if (size == ModalSize.Custom)
            options.SizeCustomClass = "my-custom-size";
        if (position == ModalPosition.Custom)
            options.PositionCustomClass = "my-custom-position";
        Modal.Show<Delete>("Xóa thông tin", options);
    }
    /////////////////////ImportExcel///////////////////////////
    //ClosedXML
    public async Task ImportExcel(ModalSize size, ModalPosition position)
    {
        var options = new ModalOptions { Size = size, Position = position, DisableBackgroundCancel = true, HideCloseButton = true };
        if (size == ModalSize.Custom)
            options.SizeCustomClass = "my-custom-size";
        if (position == ModalPosition.Custom)
            options.PositionCustomClass = "my-custom-position";
        Modal.Show<ImportExcel>("Thêm dữ liệu ", options);
    }
    /////////////////////ExportExcel//////////////////////////////
    //MemoryStream excelStream
    //_Host
    //Class FileUtils
    //Syncfusion.XlslO.Net.Core
    protected async void CreateDocument()
    {
        excelStream = CreateExcel();
        await JS.SaveAs("Khuyenmai.xlsx", excelStream.ToArray());
        toastService.ShowSuccess("Đã lưu file !", "Thành công");
    }

    public MemoryStream CreateExcel()
    {
        using (ExcelEngine excelEngine = new ExcelEngine())
        {
            IApplication application = excelEngine.Excel;
            application.DefaultVersion = ExcelVersion.Xlsx;
            IWorkbook workbook = application.Workbooks.Create(1);
            IWorksheet worksheet = workbook.Worksheets[0];
            DataTable table = SampleDataTable();
            worksheet.ImportDataTable(table, true, 1, 1);
            worksheet.UsedRange.AutofitColumns();
            using (MemoryStream stream = new MemoryStream())
            {
                workbook.SaveAs(stream);
                return stream;
            }
        }
        return null;
    }
    private DataTable SampleDataTable()
    {
        DataTable dt = new DataTable("Grid");
        dt.Columns.AddRange(new DataColumn[4] { new DataColumn("Id"),
                                                new DataColumn("Thời gian khuyến mãi"),
                                                new DataColumn("Mã sản phẩm"),
                                                new DataColumn("Tỉ lệ khuyến mãi") });

        var temp = khuyenmaiByExcel.Take(1000);
        foreach (var kmExport in temp)
        {
            dt.Rows.Add(kmExport.Id,kmExport.Thoigian,kmExport.MaSp,kmExport.Tile);
        }
        return dt;
    }
}
