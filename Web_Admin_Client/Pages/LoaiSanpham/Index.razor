@page "/LoaiSanpham/Index"
@using Blazored.Modal.Services
@using Model
@using Model.DataDB
@using Model.Dto
@using Models.Page
@using Web_Admin_Client.Pages.Modal
@inject IJSRuntime JS
@layout MainLayout
@using System.Globalization
@using Web_Admin_Client.Pages.Sanpham
@using Web_Admin_Client.Service
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager;

@inject IWebHostEnvironment Environment

<div class="main-panel">
    <div class="content-wrapper">
        <div class="page-header">
            <h3 class="page-title"> Quản lý loai sản phẩm</h3>
            @*<SearchForm OnSearchChanged="SearchChanged" />*@
            <button class="btn btn-block btn-lg btn-gradient-primary mdi mdi-playlist-plus" @onclick="() => Create(ModalSize.Custom,ModalPosition.Custom)">Thêm mới loại sản phẩm !</button>
            <button class="btn btn-block btn-lg btn-gradient-primary mdi mdi-playlist-plus" @onclick="() => ImportExcel(ModalSize.Custom,ModalPosition.Custom)">Import File Excel</button>
        </div>
        <div class="row">

            <div class="col-lg-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title"></h4>
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Chỉnh sửa</th>
                                    <th>#</th>
                                    <th>Mã loại</th>
                                    <th>Tên loại</th>

                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in loaisanpham.Select((value, i) => new { i, value }))
                                {
                                    <tr>
                                        <td>
                                            <a class="nav-link dropdown-toggle" id="profileDropdown" href="#" data-bs-toggle="dropdown" aria-expanded="false">
                                            </a>
                                            <div class="dropdown-menu navbar-dropdown" aria-labelledby="profileDropdown">
                                                <a class="dropdown-item" @onclick="() => Edit(item.value.MaLoai,ModalSize.Custom,ModalPosition.Custom)">
                                                    <i class="mdi mdi-tooltip-edit me-2 text-success"></i> Chỉnh sửa
                                                </a>
                                                <div class="dropdown-divider"></div>
                                                <a class="dropdown-item" @onclick="() => Delete(item.value.MaLoai,ModalSize.Custom,ModalPosition.Custom)">
                                                    <i class="mdi mdi-playlist-remove me-2 text-danger"></i> Xóa
                                                </a>
                                            </div>
                                        </td>

                                        <td> @(item.i + 1)</td>
                                        <td> @item.value.MaLoai </td>
                                        <td> @item.value.Tenloai </td>


                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></Pagination>
                </div>
            </div>

        </div>
    </div>
</div>

@code {
    List<LoaiDto> loaisanpham = new List<LoaiDto>();
    LoaiSpService loaiSpService = new LoaiSpService();
    public MetaData MetaData { get; set; } = new MetaData();
    private PagingParameters paging = new PagingParameters();
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            await GetLoaiSp();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }

    }
    public async void Edit(string id, ModalSize size, ModalPosition position)
    {
        await sessionStorage.SetItemAsync("loai_id", id);
        var options = new ModalOptions { Size = size, Position = position, DisableBackgroundCancel = true, HideCloseButton = true };
        if (size == ModalSize.Custom)
            options.SizeCustomClass = "my-custom-size";
        if (position == ModalPosition.Custom)
            options.PositionCustomClass = "my-custom-position";
        Modal.Show<Edit>("Chỉnh sửa thông tin", options);

    }
    public async void Create(ModalSize size, ModalPosition position)
    {
        var options = new ModalOptions { Size = size, Position = position, DisableBackgroundCancel = true, HideCloseButton = true };
        if (size == ModalSize.Custom)
            options.SizeCustomClass = "my-custom-size";
        if (position == ModalPosition.Custom)
            options.PositionCustomClass = "my-custom-position";
        Modal.Show<Create>("Thêm sản phẩm", options);
    }
    private async Task SelectedPage(int page)
    {
        paging.PageNumber = page;
        await GetLoaiSp();
    }
    private async Task GetLoaiSp()
    {
        var pagingResponse = await loaiSpService.GetListPageLoaiSp(paging);
        loaisanpham = pagingResponse.Items;
        MetaData = pagingResponse.MetaData;
    }
    private async Task SearchChanged(string search)
    {
        //paging.PageNumber = 1;
        //paging.SearchTerm = search;
        //await GetProducts();
    }
    public async Task Delete(string id, ModalSize size, ModalPosition position)
    {
        await sessionStorage.SetItemAsync("loaisp_idDelete", id);
        var options = new ModalOptions { Size = size, Position = position, DisableBackgroundCancel = true, HideCloseButton = true };
        if (size == ModalSize.Custom)
            options.SizeCustomClass = "my-custom-size";
        if (position == ModalPosition.Custom)
            options.PositionCustomClass = "my-custom-position";
        Modal.Show<Delete>("Xóa thông tin", options);
    }
    public async Task ImportExcel(ModalSize size, ModalPosition position)
    {
        var options = new ModalOptions { Size = size, Position = position, DisableBackgroundCancel = true, HideCloseButton = true };
        if (size == ModalSize.Custom)
            options.SizeCustomClass = "my-custom-size";
        if (position == ModalPosition.Custom)
            options.PositionCustomClass = "my-custom-position";
        Modal.Show<ImportExcel>("Thêm dữ liệu ", options);
    }


    //Excel----------------



}
