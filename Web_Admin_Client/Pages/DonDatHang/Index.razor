@page "/DonDatHang/Index"
@using Blazored.Modal.Services
@using Microsoft.AspNetCore.SignalR.Client
@using Model
@using Model.DataDB
@using Model.Dto
@using Models.Page
@using Web_Admin_Client.Pages.Modal
@inject IJSRuntime JS
@layout MainLayout
@using System.Globalization
@using Web_Admin_Client.Pages.Sanpham
@using Web_Admin_Client.Service
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager;
@inject IToastService toastService
<div class="main-panel">
    <div class="content-wrapper">
        <div class="page-header">
            <h3 class="page-title"> Quản lý đơn đặt hàng</h3>
            @*<SearchForm OnSearchChanged="SearchChanged" />*@
            @*<button class="btn btn-block btn-lg btn-gradient-primary mdi mdi-playlist-plus" @onclick="() => Create(ModalSize.Custom,ModalPosition.Custom)">Thêm sản nhân viên !</button>*@
        </div>
        <div class="row">

            <div class="col-lg-12 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title"></h4>
                        <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Cập nhật đơn hàng</th>
                                    <th>Tên khách hàng</th>
                                    <th>Địa chỉ</th>
                                    <th>Thời gian đặt hàng</th>
                                    <th>Tổng đơn đặt hàng</th>
                                    <th>Thông tin đơn hàng</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in listDD)
                                {
                                    <tr>
                                        <td>
                                            <a class="nav-link dropdown-toggle" id="profileDropdown" href="#" data-bs-toggle="dropdown" aria-expanded="false">
                                            </a>
                                            <div class="dropdown-menu navbar-dropdown" aria-labelledby="profileDropdown">
                                                <a class="dropdown-item" @onclick="() => CheckOrder(item.MaDdh)">
                                                    <i class="mdi mdi-tooltip-edit me-2 text-success"></i> Đang chuẩn bị
                                                </a>
                                                <div class="dropdown-divider"></div>
                                                <a class="dropdown-item" @onclick="() => CheckDelivery(item.MaDdh)">
                                                    <i class="mdi mdi-tooltip-edit me-2 text-success"></i> Đang vận chuyển
                                                </a>
                                                <div class="dropdown-divider"></div>
                                                <a class="dropdown-item" @onclick="() => CheckSuccess(item.MaDdh)">
                                                    <i class="mdi mdi-tooltip-edit me-2 text-success"></i> Đã giao hàng
                                                </a>
                                                <div class="dropdown-divider"></div>
                                                <a class="dropdown-item" @onclick="() => Delete(item.MaDdh)">
                                                    <i class="mdi mdi-playlist-remove me-2 text-danger"></i> Xóa
                                                </a>
                                            </div>
                                        </td>

                                        <td> @item.TenKh </td>
                                        <td> @item.Diachi </td>
                                        <td> @item.Thoigian </td>
                                        <td>@dondathangService.FormatVND(item.TongDdh) VND</td>
                                        <td>@item.TinhTrang</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></Pagination>
                </div>
            </div>

        </div>
    </div>
</div>
@code {

    private HubConnection hubConnection;
    private List<DonDatNewDto> listDD = new List<DonDatNewDto>();
    private DonDatDto dondatDto = new DonDatDto();
    DondathangService dondathangService = new DondathangService();
    public MetaData MetaData { get; set; } = new MetaData();
    private PagingParameters paging = new PagingParameters();
    [CascadingParameter] public IModalService Modal { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await GetDDH();
        }
        StateHasChanged();
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetDDH();
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/broadcastHub"))
                .Build();
            hubConnection.On("ReceiveMessage", async () =>
            {
                await CallData();
            });
            await hubConnection.StartAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }

    }
    private async Task CallData()
    {
        await GetDDH();
        await this.InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    private async Task GetDDH()
    {
        var pagingResponse = await dondathangService.GetListPage(paging);
        listDD = pagingResponse.Items;
        MetaData = pagingResponse.MetaData;

    }
    private async Task SelectedPage(int page)
    {
        paging.PageNumber = page;
        await GetDDH();
    }
    public async Task Delete(string id)
    {
        await dondathangService.Delete_DD(id);
        NavigationManager.NavigateTo("/");
        NavigationManager.NavigateTo("DonDatHang/Index");
        toastService.ShowSuccess("Xóa thành công !", "Thông báo");
    }
    private async Task CheckOrder(string id)
    {
        var check = await dondathangService.GetDonDatById(id);
        dondatDto.MaDdh = check.MaDdh;
        dondatDto.MaKh = check.MaKh;
        dondatDto.TongDdh = check.TongDdh;
        dondatDto.Diachi = check.Diachi;
        dondatDto.Thoigian = check.Thoigian;
        dondatDto.TinhTrang = "dang chuan bi hang";
        await dondathangService.EditDDH(id, dondatDto);
        await GetDDH();
        if (IsConnected) await SendMessage();
        StateHasChanged();
    }
    private async Task CheckDelivery(string id)
    {
        var check = await dondathangService.GetDonDatById(id);
        dondatDto.MaDdh = check.MaDdh;
        dondatDto.MaKh = check.MaKh;
        dondatDto.TongDdh = check.TongDdh;
        dondatDto.Diachi = check.Diachi;
        dondatDto.Thoigian = check.Thoigian;
        dondatDto.TinhTrang = "dang van chuyen";
        await dondathangService.EditDDH(id, dondatDto);
        await GetDDH();
        if (IsConnected) await SendMessage();
        StateHasChanged();
    }
    private async Task CheckSuccess(string id)
    {
        var check = await dondathangService.GetDonDatById(id);
        dondatDto.MaDdh = check.MaDdh;
        dondatDto.MaKh = check.MaKh;
        dondatDto.TongDdh = check.TongDdh;
        dondatDto.Diachi = check.Diachi;
        dondatDto.Thoigian = check.Thoigian;
        dondatDto.TinhTrang = "da giao hang";
        await dondathangService.EditDDH(id, dondatDto);
        await GetDDH();
        if (IsConnected) await SendMessage();
        StateHasChanged();
    }
}
