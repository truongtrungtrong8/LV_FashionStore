@page "/Nhanvien/Index"
@using Blazored.Modal.Services
@using Model
@using Model.DataDB
@using Model.Dto
@using Models.Page
@using Web_Admin_Client.Pages.Modal
@inject IJSRuntime JS
@layout MainLayout
@using System.Globalization
@using Web_Admin_Client.Pages.Sanpham
@using Web_Admin_Client.Service
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavigationManager;



        <div class="main-panel">
          <div class="content-wrapper">
            <div class="page-header">
              <h3 class="page-title"> Quản lý sản nhân viên</h3>
                    @*<SearchForm OnSearchChanged="SearchChanged" />*@
                    <button class="btn btn-block btn-lg btn-gradient-primary mdi mdi-playlist-plus" @onclick="() => Create(ModalSize.Custom,ModalPosition.Custom)">Thêm sản nhân viên !</button>     
            </div>
            <div class="row">

              <div class="col-lg-12 grid-margin stretch-card">
                <div class="card">
                  <div class="card-body">
                    <h4 class="card-title"></h4>
                    <table class="table table-bordered">
                            <thead>
                                <tr>
                                    <th>Chỉnh sửa</th>
                                    <th>Tên nhân viên</th>
                                    <th>Chức vụ</th>
                                    <th>Lương</th>
                                   
                                </tr>
                             </thead>
                            <tbody>
                                    @foreach (var item in nhanvien)
                                    {
                                    <tr>
                                        <td>
                                            <a class="nav-link dropdown-toggle" id="profileDropdown" href="#" data-bs-toggle="dropdown" aria-expanded="false">
                                            </a>
                                            <div class="dropdown-menu navbar-dropdown" aria-labelledby="profileDropdown">
                                                <a class="dropdown-item" @onclick="() => Edit(item.MaNv,ModalSize.Custom,ModalPosition.Custom)">
                                                    <i class="mdi mdi-tooltip-edit me-2 text-success"></i> Chỉnh sửa
                                                </a>
                                                <div class="dropdown-divider"></div>
                                                <a class="dropdown-item" @onclick="() => Delete(item.MaNv,ModalSize.Custom,ModalPosition.Custom)">
                                                    <i class="mdi mdi-playlist-remove me-2 text-danger"></i> Xóa
                                                </a>
                                            </div>
                                        </td>
                                        
                                        <td> @item.HtenNv </td>
                                        <td> @item.ChucvuNv </td>
                                        <td> @nhanvienService.FormatVND(item.LuongNv) VND </td>
                                       

                                    </tr>
                                    }
                            </tbody>
                    </table>
                  </div>
                   <Pagination MetaData="MetaData" Spread="2" SelectedPage="SelectedPage"></Pagination>
                </div>
              </div>

            </div>
          </div>
          </div>





@code {

    List<NhanvienDto> nhanvien = new List<NhanvienDto>();
    NhanvienService nhanvienService = new NhanvienService();
    public MetaData MetaData { get; set; } = new MetaData();
    private PagingParameters paging = new PagingParameters();
    [CascadingParameter] public IModalService Modal { get; set; } = default!;
    private string? result { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            await GetNhanvien();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }

    }
    public async void Edit(string id, ModalSize size, ModalPosition position)
    {
        await sessionStorage.SetItemAsync("nv_id", id);
        var options = new ModalOptions { Size = size, Position = position };
        if (size == ModalSize.Custom)
            options.SizeCustomClass = "my-custom-size";
        if (position == ModalPosition.Custom)
            options.PositionCustomClass = "my-custom-position";
        Modal.Show<Edit>("Chỉnh sửa thông tin", options);

    }
    public async void Create(ModalSize size, ModalPosition position)
    {
        var options = new ModalOptions { Size = size, Position = position };
        if (size == ModalSize.Custom)
            options.SizeCustomClass = "my-custom-size";
        if (position == ModalPosition.Custom)
            options.PositionCustomClass = "my-custom-position";
        Modal.Show<Create>("Thêm sản phẩm",options);
    }
    private async Task SelectedPage(int page)
    {
        paging.PageNumber = page;
        await GetNhanvien();
    }
    private async Task GetNhanvien()
    {
        var pagingResponse = await nhanvienService.GetListPageNhanvien(paging);
        nhanvien = pagingResponse.Items;
        MetaData = pagingResponse.MetaData;
    }
    private async Task SearchChanged(string search)
    {
        //paging.PageNumber = 1;
        //paging.SearchTerm = search;
        //await GetProducts();
    }
    public async Task Delete(string id, ModalSize size, ModalPosition position)
    {
        await sessionStorage.SetItemAsync("nv_idDelete", id);
        var options = new ModalOptions { Size = size, Position = position };
        if (size == ModalSize.Custom)
            options.SizeCustomClass = "my-custom-size";
        if (position == ModalPosition.Custom)
            options.PositionCustomClass = "my-custom-position";
        Modal.Show<Delete>("Xóa thông tin",options);
    }
}
