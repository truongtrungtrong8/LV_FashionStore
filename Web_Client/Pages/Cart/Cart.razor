@page "/Cart/Cart"
@using Model
@using Model.Pay
@using Web_Client.Services
@inject ICartService CartService
@inject ISanphamService sanpham
@layout LayoutCart
@inject IJSRuntime JS
@inject IJSRuntime JSRuntime

@if (!orderPlaced)
{
    @if (cartItems == null || cartItems.Count <= 0)
    {
        <h>No item</h>
    }
    else
    {
        <!-- Cart Start -->
        <div class="container-fluid">
            <div class="row px-xl-5">
                <div class="col-lg-8 table-responsive mb-5">
                    <table class="table table-light table-borderless table-hover text-center mb-0">
                        <thead class="thead-dark">
                            <tr>
                                <th>Sản phẩm</th>
                                <th>Giá</th>
                                <th>Số lượng</th>
                                <th>Tổng tiền</th>
                                <th>Xóa</th>
                            </tr>
                        </thead>
                        @foreach (var item in cartItems)
                        {
                            <tbody class="align-middle">
                                <tr>
                                    <td class="align-middle"><img src="img/product/sale/@item.HaBia" alt="" style="width: 50px;"> @item.TenSp</td>
                                    <td class="align-middle">@sanpham.FormatVND(item.GiaSp) VND</td>
                                    <td class="align-middle">
                                        <div class="input-group quantity mx-auto" style="width: 100px;">
                                            @*<div class="input-group-btn">
                                                <button class="btn btn-sm btn-primary btn-minus">
                                                    <i class="fa fa-minus"></i>
                                                </button>
                                            </div>*@
                                             <EditForm Model="item">
                                                <InputNumber id="quantity" @bind-Value="@item.Sl"
                                                 class="form-control" style="width: 70px" />
                                                 
                                            </EditForm>
@*                                            <div class="input-group-btn">
                                                <button class="btn btn-sm btn-primary btn-plus">
                                                    <i class="fa fa-plus"></i>
                                                </button>
                                            </div>*@
                                        </div>
                                    </td>
                                    <td class="align-middle">@sanpham.FormatVND((item.GiaSp * item.Sl)) VND</td>
                                    <td class="align-middle"><button class="btn btn-sm btn-danger" @onclick="@(() => DeleteItem(item))"><i class="fa fa-times"></i></button></td>
                                </tr>

                            </tbody>
                        }

                    </table>
                </div>
                   <div class="col-lg-4">
                    <form class="mb-30" action="">
                        <div class="input-group">
                            <input type="text" class="form-control border-0 p-4" placeholder="Coupon Code">
                        <div class="input-group-append">
                        <button class="btn btn-primary">Apply Coupon</button>
                        </div>
                        </div>
                    </form>
                    <h5 class="section-title position-relative text-uppercase mb-3"><span class="bg-secondary pr-3">Thông tin thanh toán</span></h5>
                    <div class="bg-light p-30 mb-5">
                        <div class="border-bottom pb-2">
                            <div class="d-flex justify-content-between mb-3">
                                <h6>Chưa VAT</h6>
                                <h6>@sanpham.FormatVND(@cartItems.Sum(item =>(item.GiaSp * item.Sl))) VND</h6>
                            </div>
                            <div class="d-flex justify-content-between">
                                <h6 class="font-weight-medium">Phí VAT</h6>
                                <h6 class="font-weight-medium">5%</h6>
                            </div>
                        </div>
                        <div class="pt-2">
                            <div class="d-flex justify-content-between mt-2">
                                <h5>Tổng tiền</h5>
                                <h5>(@cartItems.Count): @sanpham.FormatVND(int.Parse(@cartItems.Sum(item =>(item.GiaSp * item.Sl)-(item.GiaSp * item.Sl)*0.05).ToString())) VND</h5>
                            </div>
                            <button class="btn btn-block btn-primary font-weight-bold my-3 py-3" @onclick="@(() => Payment())">Thanh toán trước</button>
                            <button class="btn btn-block btn-primary font-weight-bold my-3 py-3">Thanh toán khi nhận hàng</button>
                           
                        </div>
                    </div>
                    </div>
             </div>
</div>
        <!-- Cart End -->
    }

}

@code {
        [Parameter]
        public UserIP userIP { get; set; }
    public List<CartItems> cartItems = new List<CartItems>();
    bool orderPlaced = false;

    private int total;

    GioHangDto gioHangDto = new GioHangDto();
    CTGioHangDto cTGioHangDto = new CTGioHangDto();

    GioHangService gioHangService = new GioHangService();
    CTGioHangService cTGioHangService = new CTGioHangService();

    int temp;

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            cartItems = await CartService.GetCartItems();

        }
        catch (Exception ex) {

        }

    }


    private async Task DeleteItem(CartItems item)
    {
        await CartService.DeleteItem(item);
        cartItems = await CartService.GetCartItems();
    }

    private async Task PlaceOrder()
    {
        orderPlaced = true;
        await CartService.EmptyCart();
    }

    ////// Pay
    bool paying = false;
    public async void Payment()
    {
        string url = "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html";
        string returnUrl = "https://localhost:7155/PayComfirm";
        string tmnCode = "M4SI0GQK";
        string hashSecret = "TEPHMKQSDCNVKDFCAMUICRAJVMMXNQFF";
        PayLib pay = new PayLib();

        pay.AddRequestData("vnp_Version", "2.0.0"); //Phiên bản api mà merchant kết nối. Phiên bản hiện tại là 2.0.0
        pay.AddRequestData("vnp_Command", "pay"); //Mã API sử dụng, mã cho giao dịch thanh toán là 'pay'
        pay.AddRequestData("vnp_TmnCode", tmnCode); //Mã website của merchant trên hệ thống của VNPAY (khi đăng ký tài khoản sẽ có trong mail VNPAY gửi về)
        pay.AddRequestData("vnp_Amount", (cartItems.Sum(item => (item.GiaSp * item.Sl) - (item.GiaSp * item.Sl) * 0.05)*100).ToString()); //số tiền cần thanh toán, công thức: số tiền * 100 - ví dụ 10.000 (mười nghìn đồng) --> 1000000
        pay.AddRequestData("vnp_BankCode", ""); //Mã Ngân hàng thanh toán (tham khảo: https://sandbox.vnpayment.vn/apis/danh-sach-ngan-hang/), có thể để trống, người dùng có thể chọn trên cổng thanh toán VNPAY
        pay.AddRequestData("vnp_CreateDate", DateTime.Now.ToString("yyyyMMddHHmmss")); //ngày thanh toán theo định dạng yyyyMMddHHmmss
        pay.AddRequestData("vnp_CurrCode", "VND"); //Đơn vị tiền tệ sử dụng thanh toán. Hiện tại chỉ hỗ trợ VND
        pay.AddRequestData("vnp_IpAddr", GetIp()); //Địa chỉ IP của khách hàng thực hiện giao dịch
        pay.AddRequestData("vnp_Locale", "vn"); //Ngôn ngữ giao diện hiển thị - Tiếng Việt (vn), Tiếng Anh (en)
        pay.AddRequestData("vnp_OrderInfo", "Thanh toan don hang"); //Thông tin mô tả nội dung thanh toán
        pay.AddRequestData("vnp_OrderType", "other"); //topup: Nạp tiền điện thoại - billpayment: Thanh toán hóa đơn - fashion: Thời trang - other: Thanh toán trực tuyến
        pay.AddRequestData("vnp_ReturnUrl", returnUrl); //URL thông báo kết quả giao dịch khi Khách hàng kết thúc thanh toán
        pay.AddRequestData("vnp_TxnRef", DateTime.Now.Ticks.ToString()); //mã hóa đơn

        string paymentUrl = pay.CreateRequestUrl(url, hashSecret);

        if (paying == false)
        {
            await JSRuntime.InvokeVoidAsync("open", paymentUrl, "_blank");

            paying = true;
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "Bạn đang thanh toán! ");
        }

    }
    public string GetIp()
    {
        userIP = new UserIP();
        return userIP.IPAddress;
    }
}