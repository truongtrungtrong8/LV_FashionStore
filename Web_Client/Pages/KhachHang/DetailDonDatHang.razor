@page "/Khachhang/DetailDonDatHang/{id}"
@using Model
@using Model.DataDB
@using Model.Dto
@using Model.Pay
@using Web_Client.Pages.Taikhoan
@using Web_Client.Services
@inject ICartService CartService
@inject ISanphamService sanphamService
@layout MainLayout
@inject IJSRuntime JS
@inject IJSRuntime JSRuntime
@using System.Net.Mail
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IToastService toastService
@inject NavigationManager NavigationManager

<!-- Breadcrumb Start -->
<div class="container-fluid">
    <div class="row px-xl-5">
        <div class="col-12">
            <nav class="breadcrumb bg-light mb-30">
                <a class="breadcrumb-item text-dark" href="#">Trang chủ</a>
                <a class="breadcrumb-item text-dark" href="#">Cá nhân</a>
                <a class="breadcrumb-item text-dark" href="#">Đơn đặt hàng</a>
                <span class="breadcrumb-item active">Chi tiết đơn đặt hàng</span>
            </nav>
        </div>
    </div>
</div>
<!-- Breadcrumb End -->
<div class="container-fluid">
    <div class="row px-xl-5">
        <div class="col-lg-12 table-responsive mb-5">
            <table class="table table-light table-borderless table-hover text-center mb-0">
                <thead class="thead-dark">
                    <tr>
                        <th>Sản phẩm</th>
                        <th>Tên khách hàng</th>
                        <th>Số lượng</th>
                        <th>Màu - Size</th>
                        <th>Tổng tiền</th>
                        <th>Địa chỉ</th>
                        <th>Đánh giá sản phẩm</th>
                        <th></th>
                    </tr>
                </thead>
                @foreach (var item in listCtDdh)
                {
                    <tbody class="align-middle">
                        <tr>
                            <td class="align-middle"><img src="@urlimage/images/@item.Hinhanh" alt="" style="width: 50px;"> @item.TenSP</td>
                            <td class="align-middle">@item.TenKH</td>
                            <td class="align-middle">@item.Sl</td>
                            <td class="align-middle">@item.Mau - @item.Size</td>
                            <td class="align-middle">@sanphamService.FormatVND(item.TongTien) VND</td>
                            <td class="align-middle">@item.DiaChi</td>
                            @if(dondat.TinhTrang == "dang van chuyen" || dondat.TinhTrang == "dang chuan bi hang" || dondat.TinhTrang == "chua hoan thanh")
                            {
                                <td class="align-middle"><button disabled class="btn btn-sm btn-success" @onclick="(() => Review(item.MaSp,item.MaDdh,ModalSize.Custom,ModalPosition.Custom))"><i class="fa fa-commenting-o"></i></button></td>
                            }
                            else
                            {
                                <td class="align-middle"><button class="btn btn-sm btn-success" @onclick="(() => Review(item.MaSp,item.MaDdh,ModalSize.Custom,ModalPosition.Custom))"><i class="fa fa-commenting-o"></i></button></td>
                            }
                            
                            @if(item.DanhGia == 0)
                            {
                                <td class ="align-middle" style="color:red;">chưa đánh giá</td>
                            }
                            else
                            {
                                <td class ="align-middle" style="color:dodgerblue;">đã đánh giá</td>
                            }
                                
                        </tr>
                    </tbody>
                }
            </table>
        </div>
    </div>
</div>


@code {
    [Parameter] 
    public string Id { get; set; }
    string urlimage = "https://localhost:7268";
    bool orderPlaced = false;
    [Parameter]
    public UserIP userIP { get; set; }
    public List<CartItems> cartItems = new List<CartItems>();
    CartItems cart = new CartItems();
    public List<Khachhang> khachhangs = new List<Khachhang>();
    Khachhang khachhang = new Khachhang();
    KhachHangService khachHangService = new KhachHangService();

    DonDatDto dondatDto = new DonDatDto();
    List<DonDatDto> listDonDat = new List<DonDatDto>();
    DonDatService donDatService = new DonDatService();
    CtDonDatDto ctDonDatDto = new CtDonDatDto();
    List<CtddhDtoList> listCtDdh = new List<CtddhDtoList>();
    CtDonDatService CtDonDatService = new CtDonDatService();

    Giohang giohang = new Giohang();
    GioHangDto gioHangDto = new GioHangDto();
    CTGioHangDto cTGioHangDto = new CTGioHangDto();

    GioHangService gioHangService = new GioHangService();
    CTGioHangService cTGioHangService = new CTGioHangService();

    TonkhoDto tonkho = new TonkhoDto();
    Sanpham_Model sanpham = new Sanpham_Model();
    TonkhoService tonkhoService = new TonkhoService();

    KhuyenMaiDto khuyenmai = new KhuyenMaiDto();
    Dondathang dondat = new Dondathang();
    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    private string name;
    private bool checkReview = false;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            var name_khLogin = await sessionStorage.GetItemAsync<string>("ten_kh");
            var makhachhang = await sessionStorage.GetItemAsync<string>("ma_khachhang");
            dondat = await donDatService.GetDonDatByDD(Id);
            if (name_khLogin != null)
            {
                listCtDdh = await CtDonDatService.GetList(Id);
                listDonDat = await donDatService.GetListByKH(makhachhang);
                name = name_khLogin;
            }
            else
            {
                var name_khCreate = await sessionStorage.GetItemAsync<string>("ten_kh1");
                var ma_khCreate = await sessionStorage.GetItemAsync<string>("ma_khachhangCreate");
                listCtDdh = await CtDonDatService.GetList(Id);
                listDonDat = await donDatService.GetListByKH(ma_khCreate);
                name = name_khCreate;
            }
            StateHasChanged();
        }
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    var name_khLogin = await sessionStorage.GetItemAsync<string>("ten_kh");
    //    var makhachhang = await sessionStorage.GetItemAsync<string>("ma_khachhang");
    //    if (name_khLogin != null)
    //    {
    //        listCtDdh = await CtDonDatService.GetList(Id);
    //        listDonDat = await donDatService.GetListByKH(makhachhang);
    //        name = name_khLogin;
    //    }
    //    else
    //    {
    //        var name_khCreate = await sessionStorage.GetItemAsync<string>("ten_kh1");
    //        var ma_khCreate = await sessionStorage.GetItemAsync<string>("ma_khachhangCreate");
    //        listCtDdh = await CtDonDatService.GetList(Id);
    //        listDonDat = await donDatService.GetListByKH(ma_khCreate);
    //        name = name_khCreate;
    //    }
    //}
    private async Task Delete(string id)
    {

        foreach (var item in listCtDdh)
        {
            var result = await tonkhoService.GetTonkho(item.MaSp);
            sanpham = await sanphamService.GetProduct(item.MaSp);
            tonkho.MaSp = result.MaSp;
            tonkho.MaCh = result.MaCh;
            tonkho.Sl = result.Sl + item.Sl;
            tonkho.Dg = result.Dg + sanpham.GiaSp * item.Sl;
            await tonkhoService.EditTonkho(item.MaSp, result.MaCh, tonkho);
            await CtDonDatService.DeleteDDH(id, item.MaSp);
            await donDatService.Delete_DD(id);
        }
        NavigationManager.NavigateTo("/");
        toastService.ShowSuccess("Hủy đơn hàng thành công !", "Thành công");
    }
    private async Task Detail(string id)
    {
        NavigationManager.NavigateTo("DetailDonDatHang/" + id);
    }
    private async Task Review(string id, string id1, ModalSize size, ModalPosition position)
    {
        checkReview = true;
        await sessionStorage.SetItemAsync<string>("maDDH", id1);
        await sessionStorage.SetItemAsync<string>("maSP", id);
        var options = new ModalOptions { Size = size, Position = position, HideCloseButton = true };
        if (size == ModalSize.Custom)
            options.SizeCustomClass = "my-custom-size";
        if (position == ModalPosition.Custom)
            options.PositionCustomClass = "my-custom-position";
        Modal.Show<FormReview>("Viết đánh giá của bạn", options);
    }
}
