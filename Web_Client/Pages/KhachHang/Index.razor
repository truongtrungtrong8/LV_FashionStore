@page "/KhachHang/Index"
@using Microsoft.AspNetCore.SignalR.Client
@using Model
@using Model.DataDB
@using Model.Dto
@using Model.Pay
@using Web_Client.Pages.Taikhoan
@using Web_Client.Services
@inject ICartService CartService
@inject ISanphamService sanphamService
@layout MainLayout
@inject IJSRuntime JS
@using System.Net.Mail
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IToastService toastService
@inject NavigationManager NavigationManager

<!-- Breadcrumb Start -->
<div class="container-fluid">
    <div class="row px-xl-5">
        <div class="col-12">
            <nav class="breadcrumb bg-light mb-30">
                <a class="breadcrumb-item text-dark" href="#">Trang chủ</a>
                <a class="breadcrumb-item text-dark" href="#">Cá nhân</a>
                <span class="breadcrumb-item active">Đơn đặt hàng</span>
            </nav>
        </div>
    </div>
</div>
<!-- Breadcrumb End -->
<div class="container-fluid">
    <div class="row px-xl-5">
        <div class="col-lg-12 table-responsive mb-5">
            <table class="table table-light table-borderless table-hover text-center mb-0">
                <thead class="thead-dark">
                    <tr>
                        <th>Tên người đặt hàng</th>
                        <th>Giá đơn đặt hàng</th>
                        <th>Địa chỉ giao hàng</th>
                        <th>Thời gian đặt hàng</th>
                        <th>Chi tiết đơn đặt hàng</th>
                        <th>Hủy đơn hàng</th>
                        <th>Xác nhận đã nhận hàng</th>
                        <th>Xem hóa đơn</th>
                    </tr>
                </thead>
                @foreach (var item in listDonDat)
                {
                        <tbody class="align-middle">
                            <tr>
                                <td class="align-middle">@name</td>
                                <td class="align-middle">@sanphamService.FormatVND(item.TongDdh) VND</td>
                                <td class="align-middle">@item.Diachi</td>
                                <td class="align-middle">@item.Thoigian.Day/@item.Thoigian.Month/@item.Thoigian.Year---@item.Thoigian.TimeOfDay.Hours:@item.Thoigian.TimeOfDay.Minutes:@item.Thoigian.TimeOfDay.Seconds</td>
                                <td class="align-middle"><button class="btn btn-sm btn-info" @onclick="@(() => Detail(item.MaDdh))"><i class="fa fa-info-circle"></i></button></td>
                                <td class="align-middle"><button class="btn btn-sm btn-danger" @onclick="@(() => Delete(item.MaDdh))"><i class="fa fa-times"></i></button></td>
                            @if (item.TinhTrang == "dang chuan bi hang" || item.TinhTrang == "dang van chuyen" || item.TinhTrang == "chua hoan thanh" || item.TinhTrang == "da nhan duoc hang")
                                {
                                   <td class="align-middle"><button disabled class="btn btn-sm btn-success"><i class="fa fa-check"></i></button></td>
                                }
                                else
                                {
                                   <td class="align-middle"><button class="btn btn-sm btn-success" @onclick="@(() => CheckGiaoHang(item.MaDdh,item.MaKh))"><i class="fa fa-check"></i></button></td>
                                }
                                <td class="align-middle"><button class="btn btn-sm btn-danger" @onclick="@(() => Ivoice(item.MaDdh))"><i class="fa fa-building"></i></button></td>
                            </tr>
                        </tbody>
                }
            </table>
        </div>
    </div>
</div>
<marquee style="position:absolute;top:24%" scrollamount="5">Bạn có thể hủy đơn hàng trong vòng 1 ngày kể từ ngày đặt hàng. Cảm ơn bạn !</marquee>

@code {
    string urlimage = "https://localhost:7268";
    bool orderPlaced = false;
    [Parameter]
    public UserIP userIP { get; set; }
    public List<CartItems> cartItems = new List<CartItems>();
    CartItems cart = new CartItems();
    public List<Khachhang> khachhangs = new List<Khachhang>();
    Khachhang khachhang = new Khachhang();
    KhachHangService khachHangService = new KhachHangService();

    Dondathang dondat = new Dondathang();
    DonDatDto dondatDto = new DonDatDto();
    List<DonDatDto> listDonDat = new List<DonDatDto>();
    DonDatService donDatService = new DonDatService();
    CtDonDatDto ctDonDatDto = new CtDonDatDto();
    List<CtddhDtoList> listCtDdh = new List<CtddhDtoList>();
    CtDonDatService CtDonDatService = new CtDonDatService();
    CtDdh chitietDDH = new CtDdh();

    Giohang giohang = new Giohang();
    GioHangDto gioHangDto = new GioHangDto();
    CTGioHangDto cTGioHangDto = new CTGioHangDto();

    GioHangService gioHangService = new GioHangService();
    CTGioHangService cTGioHangService = new CTGioHangService();

    TonkhoDto tonkho = new TonkhoDto();
    Sanpham_Model sanpham = new Sanpham_Model();
    TonkhoService tonkhoService = new TonkhoService();

    KhuyenMaiDto khuyenmai = new KhuyenMaiDto();

    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    private int CountDonDat { get; set; }
    private int MaDonDat { get; set; }
    private string name;
    private bool checkGiaoHang = false;
    private HubConnection hubConnection;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var name_khLogin = await sessionStorage.GetItemAsync<string>("ten_kh");
        var makhachhang = await sessionStorage.GetItemAsync<string>("ma_khachhang");
        if(firstRender)
        {
            if (name_khLogin != null)
            {
                try
                {
                    string temp = "GH" + makhachhang;
                    cartItems = await cTGioHangService.GetCartAllInUser(temp);
                    giohang = await gioHangService.GetDetail(temp);
                    //
                    listCtDdh = await CtDonDatService.GetListByKh(makhachhang);
                    listDonDat = await donDatService.GetListByKH(makhachhang);
                    name = name_khLogin;
                }
                catch (Exception ex)
                {
                    listCtDdh = await CtDonDatService.GetListByKh(makhachhang);
                    listDonDat = await donDatService.GetListByKH(makhachhang);
                    name = name_khLogin;
                }

            }
            else
            {
                try
                {
                    //
                    var name_khCreate = await sessionStorage.GetItemAsync<string>("ten_kh1");
                    var ma_khCreate = await sessionStorage.GetItemAsync<string>("ma_khachhangCreate");
                    string tempCreate = "GH" + ma_khCreate;
                    cartItems = await cTGioHangService.GetCartAllInUser(tempCreate);
                    giohang = await gioHangService.GetDetail(tempCreate);
                    //
                    listCtDdh = await CtDonDatService.GetListByKh(ma_khCreate);
                    listDonDat = await donDatService.GetListByKH(ma_khCreate);
                    name = name_khCreate;
                }
                catch (Exception ex)
                {
                    var name_khCreate = await sessionStorage.GetItemAsync<string>("ten_kh1");
                    var ma_khCreate = await sessionStorage.GetItemAsync<string>("ma_khachhangCreate");
                    listCtDdh = await CtDonDatService.GetListByKh(ma_khCreate);
                    listDonDat = await donDatService.GetListByKH(ma_khCreate);
                    name = name_khCreate;
                }

            }
            var getvnpcheck = await sessionStorage.GetItemAsync<string>("vnpcheckcode_true");

            if (getvnpcheck == "00")
            {
                await sessionStorage.RemoveItemAsync("vnpcheckcode_true");
                await AddDonDat();
                NavigationManager.NavigateTo("/Cart/Cart");
                NavigationManager.NavigateTo("/KhachHang/Index");
                toastService.ShowSuccess("Thanh toán thành công", "Thông báo");
                StateHasChanged();
            }
        }
        StateHasChanged();
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("https://localhost:7268/broadcastHub"))
            .Build();

        hubConnection.On("ReceiveMessage", async () =>
        {
            await CallData();
        });
        await hubConnection.StartAsync();
        StateHasChanged();
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    private async Task CallData()
    {
        await LoadData();
        await this.InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async Task LoadData()
    {
        var name_khLogin = await sessionStorage.GetItemAsync<string>("ten_kh");
        var makhachhang = await sessionStorage.GetItemAsync<string>("ma_khachhang");
            if (name_khLogin != null)
            {
               listDonDat = await donDatService.GetListByKH(makhachhang);
            }
            else
            {
                var name_khCreate = await sessionStorage.GetItemAsync<string>("ten_kh1");
                var ma_khCreate = await sessionStorage.GetItemAsync<string>("ma_khachhangCreate");
                listDonDat = await donDatService.GetListByKH(ma_khCreate);
            }
            StateHasChanged();
    }

    private async Task Delete(string id)
    {
        List<CtddhDtoList> newList = new List<CtddhDtoList>();
        newList = await CtDonDatService.GetList(id);
        dondat = await donDatService.GetDonDatByDD(id);
        if (DateTime.Now.DayOfYear - dondat.Thoigian.DayOfYear >= 1)
        {
            toastService.ShowWarning("Đã hết thời gian hủy đơn hàng", "Không thành công !");
        }
        else
        {
            try
            {
                foreach (var item in newList)
                {
                    var result = await tonkhoService.GetTonkho(item.MaSp);
                    sanpham = await sanphamService.GetProduct(item.MaSp);
                    tonkho.MaSp = result.MaSp;
                    tonkho.MaCh = result.MaCh;
                    tonkho.Sl = result.Sl + item.Sl;
                    tonkho.Dg = result.Dg + sanpham.GiaSp * item.Sl;
                    await tonkhoService.EditTonkho(item.MaSp, result.MaCh, tonkho);
                    await CtDonDatService.DeleteDDH(id, item.MaSp);
                    await donDatService.Delete_DD(id);
                }
                NavigationManager.NavigateTo("/");
                NavigationManager.NavigateTo("/KhachHang/Index");
                toastService.ShowSuccess("Hủy đơn hàng thành công !", "Thành công");
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex);
            }
        }

    }
    private async Task Detail(string id)
    {
        NavigationManager.NavigateTo("Khachhang/DetailDonDatHang/" + id);
    }
    private async Task Ivoice(string id)
    {
        NavigationManager.NavigateTo("/Cart/Ivoice/" + id);
    }
    private async Task CheckGiaoHang(string id, string id1)
    {
        var check = await donDatService.GetDonDatByDD(id);
        dondatDto.MaDdh = check.MaDdh;
        dondatDto.MaKh = check.MaKh;
        dondatDto.TongDdh = check.TongDdh;
        dondatDto.Diachi = check.Diachi;
        dondatDto.Thoigian = check.Thoigian;
        dondatDto.TinhTrang = "da nhan duoc hang";
        await donDatService.EditDDH(id, dondatDto);
        listDonDat = await donDatService.GetListByKH(id1);
        if (IsConnected) 
            await SendMessage();
        StateHasChanged();
        toastService.ShowSuccess("Bạn đã xác nhận nhận được sản phẩm", "Cảm ơn bạn");
    }
    private async Task AddDonDat()
    {
        var name_khCreate = await sessionStorage.GetItemAsync<string>("ten_kh1");
        var name_khLogin = await sessionStorage.GetItemAsync<string>("ten_kh");
        var ma_khCreate = await sessionStorage.GetItemAsync<string>("ma_khachhangCreate");
        var ma_khLogin = await sessionStorage.GetItemAsync<string>("ma_khachhang");
        List<DonDatDto> countDD = new List<DonDatDto>();
        countDD = await donDatService.GetCountDonDat();
        CountDonDat = countDD.Count;
        MaDonDat = CountDonDat + 1;

        if (ma_khLogin != null)
        {
            var id = "GH" + ma_khLogin;
            foreach (var item in cartItems)
            {
                ///check khuyen mai
                var result_km = await gioHangService.GetDetail(id);
                var sanpham = await sanphamService.GetProduct(item.MaSp);
                var getCTGH = await cTGioHangService.GetID(item.MaSp, id);//loi
                khachhang = await khachHangService.GetKhachHang(ma_khLogin);
                dondatDto.MaDdh = ("DDH" + MaDonDat).ToString();
                dondatDto.TongDdh = result_km.Tongtien;
                dondatDto.Diachi = khachhang.DiachiKh;
                dondatDto.MaKh = ma_khLogin; //khachhang
                dondatDto.Thoigian = DateTime.Now;
                dondatDto.TinhTrang = "chua hoan thanh";
                await donDatService.CreateDonDat(dondatDto);
                //chi tiet don dat hang
                ctDonDatDto.MaDdh = dondatDto.MaDdh;
                ctDonDatDto.MaSp = item.MaSp;
                ctDonDatDto.Sl = getCTGH.Sl;
                ctDonDatDto.Mau = item.Ten_Mau;
                ctDonDatDto.Size = item.Ten_Size;
                ctDonDatDto.DanhGia = 0;
                if (sanpham.Thoigian.Date == DateTime.Now.Date || sanpham.Thoigian.Date < DateTime.Now.Date)
                    ctDonDatDto.Dg = Convert.ToInt32(getCTGH.Sl * (sanpham.GiaSp /*-(sanpham.GiaSp*sanpham.Tile)*/));
                else
                    ctDonDatDto.Dg = Convert.ToInt32(getCTGH.Sl * (sanpham.GiaSp - (sanpham.GiaSp * sanpham.Tile)));
                await CtDonDatService.CreateCtdonDat(ctDonDatDto);
                await DeleteItemByDDH(item.MaSp, id);
                ///Tonkho
                try
                {
                    sanpham = await sanphamService.GetProduct(item.MaSp);
                    tonkho = await tonkhoService.GetTonkho(item.MaSp);
                    if (tonkho != null)
                    {
                        var result = await tonkhoService.GetTonkho(item.MaSp);
                        tonkho.MaSp = result.MaSp;
                        tonkho.MaCh = result.MaCh;
                        tonkho.Sl = result.Sl - getCTGH.Sl;
                        //if(sanpham.Thoigian.Date == DateTime.Now.Date || sanpham.Thoigian.Date < DateTime.Now.Date)
                        tonkho.Dg = (result.Sl - getCTGH.Sl) * sanpham.GiaSp;
                        //tonkho.Dg = Convert.ToInt32((result.Sl - getCTGH.Sl) * (sanpham.GiaSp - (sanpham.GiaSp * sanpham.Tile)));
                        await tonkhoService.EditTonkho(item.MaSp, result.MaCh, tonkho);
                    }
                }
                catch (Exception ex)
                {
                    tonkho.MaSp = item.MaSp;
                    tonkho.MaCh = "CH01";
                    tonkho.Sl = sanpham.Sl - item.Sl;
                    tonkho.Dg = (sanpham.Sl - item.Sl) * item.GiaSp;
                    await tonkhoService.CreateTonkho(tonkho);
                }
            }

        }
        else if (ma_khCreate != null)
        {
            var id = "GH" + ma_khCreate;
            foreach (var item in cartItems)
            {
                ///check khuyen mai
                var result_km = await gioHangService.GetDetail(id);
                var sanpham = await sanphamService.GetProduct(item.MaSp);
                var getCTGH = await cTGioHangService.GetID(item.MaSp, id);//loi
                khachhang = await khachHangService.GetKhachHang(ma_khCreate);
                dondatDto.MaDdh = ("DDH" + MaDonDat).ToString();
                dondatDto.TongDdh = result_km.Tongtien;
                dondatDto.Diachi = khachhang.DiachiKh;
                dondatDto.MaKh = ma_khCreate; //khachhang
                dondatDto.Thoigian = DateTime.Now;
                dondatDto.TinhTrang = "chua hoan thanh";
                await donDatService.CreateDonDat(dondatDto);
                //chi tiet don dat hang
                ctDonDatDto.MaDdh = dondatDto.MaDdh;
                ctDonDatDto.MaSp = item.MaSp;
                ctDonDatDto.Sl = getCTGH.Sl;
                ctDonDatDto.Mau = item.Ten_Mau;
                ctDonDatDto.Size = item.Ten_Size;
                ctDonDatDto.DanhGia = 0;
                if (sanpham.Thoigian.Date == DateTime.Now.Date || sanpham.Thoigian.Date < DateTime.Now.Date)
                    ctDonDatDto.Dg = Convert.ToInt32(getCTGH.Sl * (sanpham.GiaSp /*-(sanpham.GiaSp*sanpham.Tile)*/));
                else
                    ctDonDatDto.Dg = Convert.ToInt32(getCTGH.Sl * (sanpham.GiaSp - (sanpham.GiaSp * sanpham.Tile)));
                await CtDonDatService.CreateCtdonDat(ctDonDatDto);
                await DeleteItemByDDH(item.MaSp, id);
                ///Tonkho
                try
                {
                    sanpham = await sanphamService.GetProduct(item.MaSp);
                    tonkho = await tonkhoService.GetTonkho(item.MaSp);
                    if (tonkho != null)
                    {
                        var result = await tonkhoService.GetTonkho(item.MaSp);
                        tonkho.MaSp = result.MaSp;
                        tonkho.MaCh = result.MaCh;
                        tonkho.Sl = result.Sl - getCTGH.Sl;
                        if (sanpham.Thoigian.Date == DateTime.Now.Date || sanpham.Thoigian.Date < DateTime.Now.Date)
                            tonkho.Dg = (result.Sl - getCTGH.Sl) * sanpham.GiaSp;
                        else
                            tonkho.Dg = Convert.ToInt32((result.Sl - getCTGH.Sl) * (sanpham.GiaSp - (sanpham.GiaSp * sanpham.Tile)));
                        await tonkhoService.EditTonkho(item.MaSp, result.MaCh, tonkho);
                    }
                }
                catch (Exception ex)
                {
                    tonkho.MaSp = item.MaSp;
                    tonkho.MaCh = "CH01";
                    tonkho.Sl = sanpham.Sl - item.Sl;
                    tonkho.Dg = (sanpham.Sl - item.Sl) * item.GiaSp;
                    await tonkhoService.CreateTonkho(tonkho);
                }
            }

        }


    }
    private async Task DeleteItemByDDH(string id, string id1)
    {
        try
        {
            var result = await gioHangService.GetDetail(id1);
            var sanpham = await sanphamService.GetProduct(id);
            var getCTGH = await cTGioHangService.GetID(id, id1);//loi
            if (sanpham.Thoigian.Date == DateTime.Now.Date || sanpham.Thoigian.Date < DateTime.Now.Date)
            {
                gioHangDto.MaGh = id1;
                gioHangDto.MaKh = result.MaKh;
                gioHangDto.Ngaydat = DateTime.Now;
                gioHangDto.Tongtien = Convert.ToInt32(result.Tongtien - (sanpham.GiaSp * getCTGH.Sl) - (sanpham.GiaSp * getCTGH.Sl * 0.02));
                await gioHangService.Edit(id1, gioHangDto);
            }
            else
            {
                gioHangDto.MaGh = id1;
                gioHangDto.MaKh = result.MaKh;
                gioHangDto.Ngaydat = DateTime.Now;
                gioHangDto.Tongtien = Convert.ToInt32(result.Tongtien - ((sanpham.GiaSp - (sanpham.GiaSp * sanpham.Tile)) * getCTGH.Sl) - ((sanpham.GiaSp - (sanpham.GiaSp * sanpham.Tile)) * getCTGH.Sl) * 0.02);
                await gioHangService.Edit(id1, gioHangDto);
            }
            await cTGioHangService.DeleteCart(id, id1);
            cartItems = await cTGioHangService.GetCartAllInUser(id1);
        }
        catch (Exception ex)
        {

        }


    }
}
