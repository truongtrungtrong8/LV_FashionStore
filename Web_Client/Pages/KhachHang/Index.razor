@page "/KhachHang/Index"
@using Model
@using Model.DataDB
@using Model.Dto
@using Model.Pay
@using Web_Client.Pages.Taikhoan
@using Web_Client.Services
@inject ICartService CartService
@inject ISanphamService sanphamService
@layout MainLayout
@inject IJSRuntime JS
@using System.Net.Mail
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IToastService toastService
@inject NavigationManager NavigationManager

<!-- Breadcrumb Start -->
<div class="container-fluid">
    <div class="row px-xl-5">
        <div class="col-12">
            <nav class="breadcrumb bg-light mb-30">
                <a class="breadcrumb-item text-dark" href="#">Trang chủ</a>
                <a class="breadcrumb-item text-dark" href="#">Cá nhân</a>
                <span class="breadcrumb-item active">Đơn đặt hàng</span>
            </nav>
        </div>
    </div>
</div>
<!-- Breadcrumb End -->
<div class="container-fluid">
    <div class="row px-xl-5">
        <div class="col-lg-12 table-responsive mb-5">
            <table class="table table-light table-borderless table-hover text-center mb-0">
                <thead class="thead-dark">
                    <tr>
                        <th>Tên người đặt hàng</th>
                        <th>Giá đơn đăt hàng</th>
                        <th>Địa chỉ giao hàng</th>
                        <th>Thời gian đặt hàng</th>
                        <th>Chi tiết đơn đặt hàng</th>
                        <th>Hủy đơn hàng</th>
                        <th>Đánh giá sản phẩm</th>
                    </tr>
                </thead>
                @foreach (var item in listDonDat)
                {
                        <tbody class="align-middle">
                            <tr>
                                <td class="align-middle">@name</td>
                                <td class="align-middle">@sanphamService.FormatVND(item.TongDdh) VND</td>
                                <td class="align-middle">@item.Diachi</td>
                                <td class="align-middle">@item.Thoigian.Day/@item.Thoigian.Month/@item.Thoigian.Year-@item.Thoigian.TimeOfDay</td>
                                <td class="align-middle"><button class="btn btn-sm btn-info" @onclick="@(() => Detail(item.MaDdh))"><i class="fa fa-info-circle"></i></button></td>
                                <td class="align-middle"><button class="btn btn-sm btn-danger" @onclick="@(() => Delete(item.MaDdh))"><i class="fa fa-times"></i></button></td>
                                <td class="align-middle"><button class="btn btn-sm btn-success"><i class="fa fa-commenting-o"></i></button></td>
                            </tr>
                        </tbody>
                }
            </table>
        </div>
    </div>
</div>
<marquee style="position:absolute;top:24%" scrollamount="5">Bạn có thể hủy đơn hàng trong vòng 1 ngày kể từ ngày đặt hàng. Cảm ơn bạn !</marquee>

@code {
    string urlimage = "https://localhost:7268";
    bool orderPlaced = false;
    [Parameter]
    public UserIP userIP { get; set; }
    public List<CartItems> cartItems = new List<CartItems>();
    CartItems cart = new CartItems();
    public List<Khachhang> khachhangs = new List<Khachhang>();
    Khachhang khachhang = new Khachhang();
    KhachHangService khachHangService = new KhachHangService();

    Dondathang dondat = new Dondathang();
    DonDatDto dondatDto = new DonDatDto();
    List<DonDatDto> listDonDat = new List<DonDatDto>();
    DonDatService donDatService = new DonDatService();
    CtDonDatDto ctDonDatDto = new CtDonDatDto();
    List<CtddhDtoList> listCtDdh = new List<CtddhDtoList>();
    CtDonDatService CtDonDatService = new CtDonDatService();
    CtDdh chitietDDH = new CtDdh();

    Giohang giohang = new Giohang();
    GioHangDto gioHangDto = new GioHangDto();
    CTGioHangDto cTGioHangDto = new CTGioHangDto();

    GioHangService gioHangService = new GioHangService();
    CTGioHangService cTGioHangService = new CTGioHangService();

    TonkhoDto tonkho = new TonkhoDto();
    Sanpham_Model sanpham = new Sanpham_Model();
    TonkhoService tonkhoService = new TonkhoService();

    KhuyenMaiDto khuyenmai = new KhuyenMaiDto();

    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    private string name;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            var name_khLogin = await sessionStorage.GetItemAsync<string>("ten_kh");
            var makhachhang = await sessionStorage.GetItemAsync<string>("ma_khachhang");
            if(name_khLogin != null)
            {
                listCtDdh = await CtDonDatService.GetListByKh(makhachhang);
                listDonDat = await donDatService.GetListByKH(makhachhang);
                name = name_khLogin;
            }
            else
            {
                var name_khCreate = await sessionStorage.GetItemAsync<string>("ten_kh1");
                var ma_khCreate = await sessionStorage.GetItemAsync<string>("ma_khachhangCreate");
                listCtDdh = await CtDonDatService.GetListByKh(ma_khCreate);
                listDonDat = await donDatService.GetListByKH(ma_khCreate);
                name = name_khCreate;
            }
        }

    }

    protected override async Task OnInitializedAsync()
    {
        var name_khLogin = await sessionStorage.GetItemAsync<string>("ten_kh");
        var makhachhang = await sessionStorage.GetItemAsync<string>("ma_khachhang");
        if (name_khLogin != null)
        {
            listCtDdh = await CtDonDatService.GetListByKh(makhachhang);
            listDonDat = await donDatService.GetListByKH(makhachhang);
            name = name_khLogin;
        }
        else
        {
            var name_khCreate = await sessionStorage.GetItemAsync<string>("ten_kh1");
            var ma_khCreate = await sessionStorage.GetItemAsync<string>("ma_khachhangCreate");
            listCtDdh = await CtDonDatService.GetListByKh(ma_khCreate);
            listDonDat = await donDatService.GetListByKH(ma_khCreate);
            name = name_khCreate;
        }
    }
    private async Task Delete(string id)
    {
        dondat = await donDatService.GetDonDatByDD(id);
        if (DateTime.Now.DayOfYear - dondat.Thoigian.DayOfYear >= 1)
        {
            toastService.ShowWarning("Đã hết thời gian hủy đơn hàng", "Không thành công !");
        }
        else
        {
            try
            {
                foreach (var item in listCtDdh)
                {
                    var result = await tonkhoService.GetTonkho(item.MaSp);
                    sanpham = await sanphamService.GetProduct(item.MaSp);
                    tonkho.MaSp = result.MaSp;
                    tonkho.MaCh = result.MaCh;
                    tonkho.Sl = result.Sl + item.Sl;
                    tonkho.Dg = result.Dg + sanpham.GiaSp * item.Sl;
                    await tonkhoService.EditTonkho(item.MaSp, result.MaCh, tonkho);
                    await CtDonDatService.DeleteDDH(id, item.MaSp);
                    await donDatService.Delete_DD(id);
                }
                NavigationManager.NavigateTo("/");
                NavigationManager.NavigateTo("/KhachHang/Index");
                toastService.ShowSuccess("Hủy đơn hàng thành công !", "Thành công");
            }
            catch(Exception ex)
            {
                Console.WriteLine(ex);
            }

        }

    }
    private async Task Detail(string id)
    {
        NavigationManager.NavigateTo("Khachhang/DetailDonDatHang/" + id);
    }
    private async Task CheckDanhGia()
    {
        
    }
}
