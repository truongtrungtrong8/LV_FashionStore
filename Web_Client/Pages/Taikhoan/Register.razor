@page "/Taikhoan/Register"
@inject IJSRuntime JS
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IToastService toastService
@inject NavigationManager NavigationManager
@using System.Text.RegularExpressions
@using Model.DataDB
@using System.Security.Cryptography
@using System.Text
@using Web_Client.Pages.KhachHang
@using Web_Client.Services


<section class="ftco-section">
	<div class="container">
		<div class="row justify-content-center">
			<div class="col-md-12 col-lg-10">
				<div class="wrap d-md-flex">
					<div class="img" style="background-image: url(images/siginup.jpg);">
					</div>
					<div class="login-wrap p-4 p-md-5">
						<div class="d-flex">
							<div class="w-100">
								<h3 class="mb-4">Đăng ký</h3>
							</div>
							<div class="w-100">
								<p class="social-media d-flex justify-content-end">
									<a href="#" class="social-icon d-flex align-items-center justify-content-center"><span class="fa fa-facebook"></span></a>
									<a href="#" class="social-icon d-flex align-items-center justify-content-center"><span class="fa fa-twitter"></span></a>
								</p>
							</div>
						</div>
                        <EditForm Model="acc">
                            <form class="signin-form">
                                <div class="form-group mb-3">
                                    <label class="label" for="name">Số điện thoại</label>
                                    <InputText type="email" @bind-Value="acc.TenTk" placeholder="Số điện thoại" @ref=phone class="form-control" />
                                </div>
                                <div class="form-group mb-3">
                                    <label class="label" for="password">Mật khẩu</label>
                                    <InputText type="@typeInput" @bind-Value="acc.Matkhau" @ref=passwordOne class="form-control" />
                                </div>
                                <div class="form-group mb-3">
                                    <label class="label" for="password">Nhập lại mật khẩu</label>
                                    <InputText type="@typeInput" @bind-Value="pwdTwo" @ref=passwordTwo class="form-control" />
                                </div>
                                <div class="form-group">
                                    <button type="button" class="form-control btn btn-primary rounded submit px-3" @onclick="CheckRegister">Đăng ký</button>
                                </div>
                                <div class="form-group d-md-flex">
                                    <div class="w-50 text-left">
                                        <label class="checkbox-wrap checkbox-primary mb-0">
                                            Hiện mật khẩu
                                            <input type="checkbox" @bind-value="@isChecked" @oninput="DoCheckBox" />
                                            <span class="checkmark"></span>
                                        </label>
                                    </div>
                                    
                                </div>
                            </form>
                        </EditForm>
					</div>
				</div>
			</div>
		</div>
	</div>
</section>


@code {
    [Parameter]
    public bool IsChecked { get; set; } = true;
    private InputText phone;
    private InputText passwordOne;
    private InputText passwordTwo;
    private InputCheckbox chk;
    private string pwdTwo;
    private bool isChecked = false;
    private string typeInput = "password";
    [CascadingParameter] public IModalService Modal { get; set; }

    Taikhoan acc = new Taikhoan();
    TaiKhoanService accountService = new TaiKhoanService();
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    ModalSize size;
    ModalPosition position;

    protected override async Task OnInitializedAsync()
    {
        acc.Quyensd = "user";
    }

    public static bool IsPhoneNumber(string number)
    {
        if (number == null)
            return false;
        try
        {
            string temp = number.Substring(0, 2);
            if (temp == "09" || temp == "03" || temp == "07" || temp == "08" || temp == "05")
            {
                if (number.Length == 10) return true;
            }
            return false;
        }
        catch (Exception e)
        {
            return false;
        }
    }

    public async void CheckRegister()
    {
        if (IsPhoneNumber(phone.Value))
        {
            if (passwordOne.Value == null)
            {
                toastService.ShowWarning("Bạn chưa nhập mật khẩu!", "Thông báo!");
                passwordOne.Element.Value.FocusAsync();
            }
            else if (passwordTwo.Value == null)
            {
                toastService.ShowWarning("Bạn chưa nhập lại mật khẩu!", "Thông báo!");
                passwordTwo.Element.Value.FocusAsync();
            }
            else if (passwordTwo.Value != passwordOne.Value)
            {
                toastService.ShowWarning("Mật khẩu không khớp!", "Thông báo!");
                passwordTwo.Element.Value.FocusAsync();
            }
            else if (passwordOne.Value.Length < 5)
            {
                toastService.ShowWarning("Mật khẩu phải ít nhất 5 ký tự!", "Thông báo!");
                passwordOne.Element.Value.FocusAsync();
            }
            else
            {
                try
                {
                    if ((await CheckAccInDB(phone.Value)) == false)
                    {
                        toastService.ShowWarning("Số điện thoại đã được đăng ký!\n Vui lòng chọn số điện thoại khác!", "Thông báo!");
                        phone.Element.Value.FocusAsync();
                    }
                }
                catch (Exception ex)
                {
                    acc.TenTk = phone.Value;
                    acc.Matkhau = GetMD5(passwordOne.Value);
                    acc.TrangThai = "ok";
                    try
                    {
                        var account = await accountService.AddATaiKhoan(acc);
                        if (account != null)
                        {
                            await sessionStorage.SetItemAsync("ten_tk_dk", account.TenTk);
                            toastService.ShowSuccess("Bạn vui lòng điền thông tin cá nhân khi đăng nhập !", "Chúc mừng!");
                            Thread.Sleep(500);
                            await this.ModalInstance.CancelAsync();
                            var options = new ModalOptions { Size = size, Position = position, Class = "my-custom-modal-class", HideCloseButton = true, HideHeader = true, DisableBackgroundCancel = false };
                                options.SizeCustomClass = "my-custom-size-login";
                                options.PositionCustomClass = "my-custom-position-login";
                            Modal.Show<Login>("",options);
                        }
                    }
                    catch (Exception x)
                    {
                        Console.WriteLine(x);
                    }

                }
            }
        }
        else
        {
            if (phone.Value == null)
                toastService.ShowError("Bạn chưa nhập số điện thoại!", "Lỗi!");
            else
                toastService.ShowError("Số điện thoại không hợp lệ!", "Lỗi!");
        }
    }
    public async Task<bool> CheckAccInDB(string phone)
    {
        if (await accountService.CheckTaiKhoan(phone) == null)
            return true;
        else
            return false;
    }


    void DoCheckBox()
    {
        if (isChecked)
        {
            typeInput = "password";
            isChecked = true;
        }
        else
        {
            typeInput = "text";
            isChecked = false;
        }
    }


    public string GetMD5(string str)
    {
        MD5 md5 = new MD5CryptoServiceProvider();
        byte[] fromData = Encoding.UTF8.GetBytes(str);
        byte[] targetData = md5.ComputeHash(fromData);
        string byte2String = null;

        for (int i = 0; i < targetData.Length; i++)
        {
            byte2String += targetData[i].ToString("x2");

        }
        return byte2String;
    }
}
