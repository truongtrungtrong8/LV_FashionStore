@page "/Taikhoan/Register"
@inject IJSRuntime JS
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IToastService toastService
@inject NavigationManager NavigationManager
@using System.Text.RegularExpressions
@using Model.DataDB
@using Web_Client.Pages.KhachHang
@using Web_Client.Services


<EditForm Model="acc" style="width:400px">
    <!-- Email input -->
    <div class="form-outline mb-4">
        <label class="form-label" for="form2Example1">Số điện thoại</label>
        <InputText type="email" @bind-Value="acc.TenTk" @ref=phone class="form-control" />
    </div>

    <!-- Password input -->
    <div class="form-outline mb-4">
        <label class="form-label" for="form2Example2">Mật khẩu</label>
        <InputText type="@typeInput" @bind-Value="acc.Matkhau" @ref=passwordOne class="form-control" />
    </div>

    <div class="form-outline mb-4">
        <label class="form-label" for="form2Example2">Nhập lại mật khẩu</label>
        <InputText type="@typeInput" @bind-Value="pwdTwo" @ref=passwordTwo class="form-control" />
    </div>

    <div class="form-outline mb-4">
        <input type="checkbox" @bind-value="@isChecked" @oninput="DoCheckBox" />
        <label class="form-label" for="form2Example2">Hiện mật khẩu</label>
    </div>

    

    <!-- Submit button -->
    <button style="width:50%;margin-inline: auto;" type="button" class="btn btn-primary btn-block mb-4" @onclick="CheckRegister">Đăng ký</button>

</EditForm>

@code {
    [Parameter]
    public bool IsChecked { get; set; } = true;
    private InputText phone;
    private InputText passwordOne;
    private InputText passwordTwo;
    private InputCheckbox chk;
    private string pwdTwo;
    private bool isChecked = false;
    private string typeInput = "password";
    [CascadingParameter] public IModalService Modal { get; set; }

    Taikhoan acc = new Taikhoan();
    TaiKhoanService accountService = new TaiKhoanService();
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    protected override async Task OnInitializedAsync()
    {
        acc.Quyensd = "user";
    }

    public static bool IsPhoneNumber(string number)
    {
        if (number == null)
            return false;
        try
        {
            string temp = number.Substring(0, 2);
            if (temp == "09" || temp == "03" || temp == "07" || temp == "08" || temp == "05")
            {
                if (number.Length == 10) return true;
            }
            return false;
        }
        catch (Exception e)
        {
            return false;
        }
    }

    public async void CheckRegister()
    {
        if (IsPhoneNumber(phone.Value))
        {
            if (passwordOne.Value == null)
            {
                toastService.ShowWarning("Bạn chưa nhập mật khẩu!", "Thông báo!");
                passwordOne.Element.Value.FocusAsync();
            }
            else if (passwordTwo.Value == null)
            {
                toastService.ShowWarning("Bạn chưa nhập lại mật khẩu!", "Thông báo!");
                passwordTwo.Element.Value.FocusAsync();
            }
            else if (passwordTwo.Value != passwordOne.Value)
            {
                toastService.ShowWarning("Mật khẩu không khớp!", "Thông báo!");
                passwordTwo.Element.Value.FocusAsync();
            }
            else if (passwordOne.Value.Length < 5)
            {
                toastService.ShowWarning("Mật khẩu phải ít nhất 5 ký tự!", "Thông báo!");
                passwordOne.Element.Value.FocusAsync();
            }
            else
            {
                try
                {
                    if ((await CheckAccInDB(phone.Value)) == false)
                    {
                        toastService.ShowWarning("Số điện thoại đã được đăng ký!\n Vui lòng chọn số điện thoại khác!", "Thông báo!");
                        phone.Element.Value.FocusAsync();
                    }
                }
                catch (Exception ex)
                {
                    acc.TenTk = phone.Value;
                    acc.Matkhau = passwordOne.Value;
                    try
                    {
                        var account = await accountService.AddATaiKhoan(acc);
                        if (account != null)
                        {
                            await sessionStorage.SetItemAsync("ten_tk_dk", account.TenTk);
                            toastService.ShowSuccess("Bạn vui lòng điền thông tin cá nhân khi đăng nhập !", "Chúc mừng!");
                            Thread.Sleep(500);
                            await this.ModalInstance.CancelAsync();
                            Modal.Show<Login>("Đăng nhập");
                        }
                    }
                    catch (Exception x)
                    {
                        Console.WriteLine(x);
                    }

                }
            }
        }
        else
        {
            if (phone.Value == null)
                toastService.ShowError("Bạn chưa nhập số điện thoại!", "Lỗi!");
            else
                toastService.ShowError("Số điện thoại không hợp lệ!", "Lỗi!");
        }
    }
    public async Task<bool> CheckAccInDB(string phone)
    {
        if (await accountService.CheckTaiKhoan(phone) == null)
            return true;
        else
            return false;
    }


    void DoCheckBox()
    {
        if (isChecked)
        {
            typeInput = "password";
            isChecked = true;
        }
        else
        {
            typeInput = "text";
            isChecked = false;
        }
    }
}
