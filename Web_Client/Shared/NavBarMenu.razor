@using Model
@using Web_Client.Pages
@using Web_Client.Pages.Cart
@using Web_Client.Pages.Sanpham
@using Web_Client.Pages.Taikhoan
@using Blazored.Toast
@using Blazored.Toast.Configuration;
@using Web_Client.Services
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService localstorage
@inject IToastService toastService
@inject NavigationManager NavigationManager


<div class="container-fluid bg-dark mb-30">
    <div class="row px-xl-5">
        <div class="col-lg-3 d-none d-lg-block">
            <a class="btn d-flex align-items-center justify-content-between bg-primary w-100" data-toggle="collapse" href="#navbar-vertical" style="height: 65px; padding: 0 30px;">
                <h6 class="text-dark m-0"><i class="fa fa-bars mr-2"></i>Danh mục</h6>
                <i class="fa fa-angle-down text-dark"></i>
            </a>
            <nav class="collapse position-absolute navbar navbar-vertical navbar-light align-items-start p-0 bg-light" id="navbar-vertical" style="width: calc(100% - 30px); z-index: 999;">
                <div class="navbar-nav w-100">
                    <a href="/Sanpham/Ao" class="nav-item nav-link">Hàng mới</a>
                    <a href="/Sanpham/Quan" class="nav-item nav-link">Mùa đông</a>
                    <a href="/Sanpham/Giay" class="nav-item nav-link">Thể thao</a>
                    <a href="/Sanpham/Kinh" class="nav-item nav-link">Ưu chuộng</a>
                    @*                        <a href="" class="nav-item nav-link">Sportswear</a>
                    <a href="" class="nav-item nav-link">Jumpsuits</a>
                    <a href="" class="nav-item nav-link">Blazers</a>
                    <a href="" class="nav-item nav-link">Jackets</a>
                    <a href="" class="nav-item nav-link">Shoes</a>*@
                </div>
            </nav>
        </div>
        <div class="col-lg-9">
            <nav class="navbar navbar-expand-lg bg-dark navbar-dark py-3 py-lg-0 px-0">
                <a href="" class="text-decoration-none d-block d-lg-none">
                    <span class="h1 text-uppercase text-dark bg-light px-2">Multi</span>
                    <span class="h1 text-uppercase text-light bg-primary px-2 ml-n1">Shop</span>
                </a>
                <button type="button" class="navbar-toggler" data-toggle="collapse" data-target="#navbarCollapse">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse justify-content-between" id="navbarCollapse">
                    <div class="navbar-nav mr-auto py-0">
                        <a href="/" class="nav-item nav-link active">Trang chủ</a>
                        <a href="/Sanpham/Ao" class="nav-item nav-link">Hàng mới</a>
                        <a href="/Sanpham/Quan" class="nav-item nav-link">Thời trang mùa đông</a>
                        <a href="/Sanpham/Giay" class="nav-item nav-link">Thể thao</a>
                        <a href="/Sanpham/Kinh" class="nav-item nav-link">Ưa chuộng</a>
                       
                    </div>
                    <div class="navbar-nav ml-auto py-0 d-none d-lg-block">
                        <a href="" class="btn px-0">
                            <i class="fas fa-heart text-primary"></i>
                            <span class="badge text-secondary border border-secondary rounded-circle" style="padding-bottom: 2px;">0</span>
                        </a>
                        <button type="button" class="btn px-0 ml-3">
                            <i class="fas fa-shopping-cart text-primary" @onclick=" () => CartShow(ModalSize.Custom,ModalPosition.Custom)"></i>
                            <span class="badge text-secondary border border-secondary rounded-circle" style="padding-bottom: 2px;">@countCart</span>
                        </button>
                    </div>
                </div>
            </nav>
        </div>
    </div>
</div>

@code {
    private Modal modal { get; set; }
    private string name { get; set; }
    private string name1 { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }
    private int countCart;

    public List<CartItems> cartItems = new List<CartItems>();
    CTGioHangService cTGioHangService = new CTGioHangService();


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
            try
            {
                var makhachhang = await sessionStorage.GetItemAsync<string>("ma_khachhang");
                name = await sessionStorage.GetItemAsync<string>("ten_kh");
                name1 = await sessionStorage.GetItemAsync<string>("ten_kh1");
                if (makhachhang != null)
                {
                    string temp = "GH" + makhachhang;
                    cartItems = await cTGioHangService.GetCartAllInUser(temp);
                    StateHasChanged();
                    countCart = cartItems.Count;

                }
                else
                {
                    var ma_khCreate = await sessionStorage.GetItemAsync<string>("ma_khachhangCreate");
                    string tempCreate = "GH" + ma_khCreate;
                    cartItems = await cTGioHangService.GetCartAllInUser(tempCreate);
                    StateHasChanged();
                    countCart = cartItems.Count;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.ToString());
        }
    }


    public async void CartShow(ModalSize size, ModalPosition position)
    {
        name = await sessionStorage.GetItemAsync<string>("ten_kh");
        name1 = await sessionStorage.GetItemAsync<string>("ten_kh1");
        //toastService.ShowWarning("Bạn không có giỏ hàng cá nhân !", "Mời bạn đăng nhập");
        //Modal.Show<Login>("Đăng nhập");
        try
        {
            if(name != null) 
            {
                NavigationManager.NavigateTo("/Cart/Cart");
            }
            else if (name1 != null)
            {
                NavigationManager.NavigateTo("/Cart/Cart");
            }
            else if(name == null && name1 == null)
            {
                toastService.ShowWarning("Bạn không có giỏ hàng cá nhân !", "Mời bạn đăng nhập");
                var options = new ModalOptions { Size = size, Position = position, Class = "my-custom-modal-class", HideCloseButton = true, HideHeader = true, DisableBackgroundCancel = false };
                if (size == ModalSize.Custom)
                    options.SizeCustomClass = "my-custom-size-login";
                if (position == ModalPosition.Custom)
                    options.PositionCustomClass = "my-custom-position-login";
                Modal.Show<Login>("",options);
            }
       }
       catch (Exception ex) 
       {
            toastService.ShowWarning("Bạn không có giỏ hàng cá nhân !", "Mời bạn đăng nhập");
            var options = new ModalOptions { Size = size, Position = position, Class = "my-custom-modal-class", HideCloseButton = true, HideHeader = true, DisableBackgroundCancel = false };
            if (size == ModalSize.Custom)
                options.SizeCustomClass = "my-custom-size-login";
            if (position == ModalPosition.Custom)
                options.PositionCustomClass = "my-custom-position-login";
            Modal.Show<Login>("", options);
       }
    }
}
