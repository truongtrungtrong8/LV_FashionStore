@using Web_Client.Pages
@using Web_Client.Pages.Cart
@using Web_Client.Pages.Sanpham
@using Web_Client.Pages.Taikhoan
@using Blazored.Toast
@using Blazored.Toast.Configuration;
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject Blazored.LocalStorage.ILocalStorageService localstorage
@inject IToastService toastService
@inject NavigationManager NavigationManager

<div class="container-fluid">
    <div class="row bg-secondary py-1 px-xl-5">
        <div class="col-lg-6 d-none d-lg-block">
            <div class="d-inline-flex align-items-center h-100">
                <a class="text-body mr-3" href="">Thông tin</a>
                <a class="text-body mr-3" href="">Tổng quan</a>
                <a class="text-body mr-3" href="">Trợ giúp</a>
                <a class="text-body mr-3" href="/Cart/Cart">...</a>
            </div>
        </div>
        <div class="col-lg-6 text-center text-lg-right">
            <div class="d-inline-flex align-items-center">
                <div class="btn-group">
                    <button type="button" class="btn btn-sm btn-light dropdown-toggle" data-toggle="dropdown">Cá nhân</button>
                    <div class="dropdown-menu dropdown-menu-right">
                        <button class="dropdown-item" type="button" @onclick="() => Login(ModalSize.Custom,ModalPosition.TopCenter)">Đăng nhập</button>
                        <button class="dropdown-item" type="button" @onclick="() => Register(ModalSize.Custom,ModalPosition.TopCenter)">Đăng ký</button>
                        <button class="dropdown-item" type="button" @onclick="Logout">Đăng xuất</button>
                        
                    </div>
                </div>
                <div class="btn-group mx-2">
                    <button type="button" class="btn btn-sm btn-light dropdown-toggle" data-toggle="dropdown">USD</button>
                    <div class="dropdown-menu dropdown-menu-right">
                        <button class="dropdown-item" type="button">EUR</button>
                        <button class="dropdown-item" type="button">GBP</button>
                        <button class="dropdown-item" type="button">CAD</button>
                    </div>
                </div>
                <div class="btn-group">
                    <button type="button" class="btn btn-sm btn-light dropdown-toggle" data-toggle="dropdown">EN</button>
                    <div class="dropdown-menu dropdown-menu-right">
                        <button class="dropdown-item" type="button">FR</button>
                        <button class="dropdown-item" type="button">AR</button>
                        <button class="dropdown-item" type="button">RU</button>
                    </div>
                </div>
            </div>
            <div class="d-inline-flex align-items-center d-block d-lg-none">
                <a href="" class="btn px-0 ml-2">
                    <i class="fas fa-heart text-dark"></i>
                    <span class="badge text-dark border border-dark rounded-circle" style="padding-bottom: 2px;">0</span>
                </a>
                <button type="button" class="btn px-0 ml-2" @onclick="() => CartShow(ModalSize.Custom,ModalPosition.TopCenter)">
                    <i class="fas fa-shopping-cart text-dark" ></i>
                    <span class="badge text-dark border border-dark rounded-circle" style="padding-bottom: 2px;">0</span>
                </button>
            </div>
        </div>
    </div>
    <div class="row align-items-center bg-light py-3 px-xl-5 d-none d-lg-flex">
        <div class="col-lg-4">
            <a href="" class="text-decoration-none">
                <span class="h1 text-uppercase text-primary bg-dark px-2">Multi</span>
                <span class="h1 text-uppercase text-dark bg-primary px-2 ml-n1">Shop</span>
            </a>
        </div>
        <div class="col-lg-4 col-6 text-left">
            <form action="">
                <div class="input-group">
                    <input type="text" class="form-control" placeholder="Search for products">
                    <div class="input-group-append">
                        <span class="input-group-text bg-transparent text-primary">
                            <i class="fa fa-search"></i>
                        </span>
                    </div>
                </div>
            </form>
        </div>
        @if(name != null) {
            <div class="col-lg-4 col-6 text-right">
                <p class="m-0">Chào bạn !</p>
                <h5 class="m-0">@name</h5>
            </div>
        }
        else if(name1 != null)
        {
            <div class="col-lg-4 col-6 text-right">
                <p class="m-0">Chào bạn !</p>
                <h5 class="m-0">@name1</h5>
            </div>
        }
      
    </div>
</div>


@code {
    private Modal modal { get; set; }
    private string name { get; set; }
    private string name1 { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            name = await sessionStorage.GetItemAsync<string>("ten_kh");
            name1 = await sessionStorage.GetItemAsync<string>("ten_kh1");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }

    }


    public async void Register(ModalSize size, ModalPosition position)
    {
        var options = new ModalOptions { Size = size, Position = position, Class = "my-custom-modal-class", HideCloseButton = true, HideHeader = true, DisableBackgroundCancel = false };
        if (size == ModalSize.Custom)
            options.SizeCustomClass = "my-custom-size-login";
        if (position == ModalPosition.Custom)
            options.PositionCustomClass = "my-custom-position-login";
        Modal.Show<Register>("", options);
    }
    public async void Logout() 
    {
        try
        {
            await sessionStorage.ClearAsync();
            await localstorage.SetItemAsync<string>("1", "1");
            await localstorage.SetItemAsync<string>("2", "2");
            await localstorage.SetItemAsync<string>("3", "3");
            var temp = await localstorage.GetItemAsync<string>("1");
            var temp1 = temp;
            await localstorage.ClearAsync();
            var temp2 = await localstorage.GetItemAsync<string>("1");
            var temp3 = temp;
            toastService.ShowWarning("Đăng xuất thành công !", "Hẹn gặp lại bạn !");
            NavigationManager.NavigateTo("/Cart/Cart");
            NavigationManager.NavigateTo("/");
            StateHasChanged();
        }
        catch(Exception ex)
        {
            Console.WriteLine(ex);
        }
        

    }

    public async void Login(ModalSize size, ModalPosition position)
    {
        var options = new ModalOptions { Size = size, Position = position,Class = "my-custom-modal-class",HideCloseButton = true, HideHeader= true,DisableBackgroundCancel=false };
        if (size == ModalSize.Custom)
            options.SizeCustomClass = "my-custom-size-login";
        if (position == ModalPosition.Custom)
            options.PositionCustomClass = "my-custom-position-login";
        Modal.Show<Login>("", options);
    }
    public async void CartShow(ModalSize size, ModalPosition position)
    {
        name = await sessionStorage.GetItemAsync<string>("ten_kh");
        name1 = await sessionStorage.GetItemAsync<string>("ten_kh1");

        if(name == null || name1 == null)
        {
            toastService.ShowWarning("Bạn không có giỏ hàng cá nhân !", "Mời bạn đăng nhập");
            var options = new ModalOptions { Size = size, Position = position, Class = "my-custom-modal-class", HideCloseButton = true, HideHeader = true, DisableBackgroundCancel = false };
            if (size == ModalSize.Custom)
                options.SizeCustomClass = "my-custom-size-login";
            if (position == ModalPosition.Custom)
                options.PositionCustomClass = "my-custom-position-login";
            Modal.Show<Login>("Đăng nhập",options);
        }
        else 
        {
            NavigationManager.NavigateTo("/Cart/Cart");
        }
    }
}
